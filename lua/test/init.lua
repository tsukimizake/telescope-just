--Run the test using `:PlenaryBustedFile %` .

local parser = require 'telescope-just.parser'

describe("telescope-just.parser", function()
  it("test # this is a test", function ()
    name, desc = parser.parse_line("test # this is a test")
    assert.equals("test", name)
    assert.equals("this is a test", desc)
  end)
  it("test_recipe # this is a test", function ()
    name, desc = parser.parse_line("test_recipe # this is a test")
    assert.equals("test_recipe", name)
    assert.equals("this is a test", desc)
  end)
  it("test-recipe # this is a test", function ()
    name, desc = parser.parse_line("test-recipe # this is a test")
    assert.equals("test-recipe", name)
    assert.equals("this is a test", desc)
  end)
  it("_test_recipe # this is a test", function ()
    name, desc = parser.parse_line("_test_recipe # this is a test")
    assert.equals("_test_recipe", name)
    assert.equals("this is a test", desc)
  end)
  it("test", function ()
    name, desc = parser.parse_line("test")
    assert.equals("test", name)
    assert.equals("no desc", desc)
  end)
  it("test_recipe", function ()
    name, desc = parser.parse_line("test_recipe")
    assert.equals("test_recipe", name)
    assert.equals("no desc", desc)
  end)
  it("test-recipe", function ()
    name, desc = parser.parse_line("test-recipe")
    assert.equals("test-recipe", name)
    assert.equals("no desc", desc)
  end)
  it("_test_recipe", function ()
    name, desc = parser.parse_line("_test_recipe")
    assert.equals("_test_recipe", name)
    assert.equals("no desc", desc)
  end)
  it("test arg1 arg2 # this is a test", function ()
    name, desc = parser.parse_line("test arg1 arg2 # this is a test")
    assert.equals("test", name)
    assert.equals("this is a test", desc)
  end)
  it("test *args # this is a test", function ()
    name, desc = parser.parse_line("test *args # this is a test")
    assert.equals("test", name)
    assert.equals("this is a test", desc)
  end)
end)

